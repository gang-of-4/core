generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id                  String @db.Uuid @id @default(uuid())  
    first_name          String
    last_name           String
    email               String @unique
    phone               String @unique
    role_id             String @db.Uuid
    role                Role @relation(fields: [role_id], references: [id])
    email_verified_at   DateTime?
    credentials         CredentialsAccount?
    oauth_accounts      OAuthAccount[]
    created_at          DateTime @default(now())
    updated_at          DateTime @default(now())
    deleted_at          DateTime?
}

model Role {
    id              String @db.Uuid @id @default(uuid())  
    name            String
    permissions     RolePermissions[]
    users           User[]
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
    @@index([name])
}

model Permission {
    id              String @db.Uuid @id @default(uuid())  
    name            String
    roles           RolePermissions[]
    activities      PermissionActivites[]
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
}

model RolePermissions {
    role_id         String      @db.Uuid
    permission_id   String      @db.Uuid
    role            Role        @relation(fields: [role_id], references: [id])
    permission      Permission  @relation(fields: [permission_id], references: [id])
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    @@id([role_id, permission_id])
}

model Activity {
    id              String @db.Uuid() @id @default(uuid())  
    permissions     PermissionActivites[]
    method          String @db.Char(8)
    url             String
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
    @@index([method, url])
}

model PermissionActivites {
    permission_id   String @db.Uuid
    activity_id     String @db.Uuid
    permission      Permission @relation(fields: [permission_id], references: [id])
    activity        Activity @relation(fields: [activity_id], references: [id])
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    @@id([permission_id, activity_id])
}

model Provider {
    id              String @db.Uuid() @id @default(uuid())  
    name            String
    oauth_accounts  OAuthAccount[]
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
}

model CredentialsAccount {
    id              String @db.Uuid() @id @default(uuid())  
    user_id         String @db.Uuid @unique
    user            User @relation(fields: [user_id], references: [id])
    password        String @db.Char(60)
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
}

model OAuthAccount {
    id              String @db.Uuid() @id @default(uuid())  
    provider_id     String @db.Uuid
    provider        Provider @relation(fields: [provider_id], references: [id])
    user_id         String @db.Uuid
    user            User @relation(fields: [user_id], references: [id])
    access_token    String?
    refresh_token   String?
    payload         Json?
    expires_at      DateTime?
    created_at      DateTime @default(now())
    updated_at      DateTime @default(now())
    deleted_at      DateTime?
    @@unique([provider_id, user_id])
}

