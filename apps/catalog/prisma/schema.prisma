generator client {
  provider = "prisma-client-js"
  output = "./../node_modules/@prisma/client/catalog"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Status {
  PENDING
  INREVIEW
  APPROVED
  REJECTED
}

enum ItemType {
  PHYSICAL
}

model Currency {
    id              String @db.Uuid @id @default(uuid())  
    name            String @unique
    code            String @unique
    symbol          String
    exchangeRate    Decimal @db.Decimal(10, 6)
    isActive        Boolean @default(true)
    isDefault       Boolean @default(false)
    items           Item[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @default(now())
    deletedAt       DateTime?
}

model Item {
    id                  String @db.Uuid @id @default(uuid())  
    type                ItemType @default(PHYSICAL)
    name                String
    slug                String  @unique
    quantity            Int?
    images              ItemImages[]
    price               Decimal? @db.Decimal(10, 2)
    currencyId          String @db.Uuid
    currency            Currency @relation(fields: [currencyId], references: [id])
    description         String
    categories          ItemCategories[]
    storeId             String @db.Uuid
    status              Status @default(PENDING)
    order               Int
    isActive            Boolean @default(true)
    isTaxable           Boolean @default(true)
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())
    deletedAt           DateTime?
}

model ItemImages {
    itemId              String @db.Uuid
    item                Item @relation(fields: [itemId], references: [id])
    mediaId             String @db.Uuid
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())
    @@id([itemId])
}

model ItemCategories {
    itemId              String @db.Uuid
    categoryId          String @db.Uuid
    item                Item @relation(fields: [itemId], references: [id])
    category            Cateogry @relation(fields: [categoryId], references: [id])
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())
    @@id([itemId, categoryId])

}

model Cateogry {
    id                  String @db.Uuid @id @default(uuid())  
    name                String
    slug                String @unique
    banner              String @db.Uuid
    logo                String @db.Uuid
    description         String
    isActive            Boolean @default(true)
    order               Int
    items               ItemCategories[]
    childCategories     Cateogry[] @relation(name: "CompositeCategory")
    parentId            String @db.Uuid
    parent              Cateogry? @relation(name: "CompositeCategory", fields: [parentId], references: [id])
    createdAt           DateTime @default(now())
    updatedAt           DateTime @default(now())
    deletedAt           DateTime?
}